name: "[ptars] Release"

on:
  push:
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ptars
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTUP_MAX_RETRIES: 10

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: "Build sdist"
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: "Test sdist"
        run: |
          tar -ztvf dist/${{ env.PACKAGE_NAME }}-*.tar.gz
          pip install dist/${{ env.PACKAGE_NAME }}-*.tar.gz --force-reinstall
          python -c "import ptars"
      - name: "Upload sdist"
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: -i python --release --out dist
      - name: Install build wheel - x86_64
        run: |
          pip install --force-reinstall dist/ptars*.whl
          cd ~ && python -c 'import ptars'
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: -i python --release --target=universal2-apple-darwin --out dist
      - name: Install build wheel - universal2
        run: |
          pip install --force-reinstall dist/ptars*_universal2.whl
          cd ~ && python -c 'import ptars'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
        target:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist
      - name: Install build wheel
        shell: bash
        run: |
          pip install --force-reinstall dist/ptars*.whl
          cd ~ && python -c 'import ptars'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i python${{ matrix.python-version }} --release --out dist
      - name: Install build wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install --force-reinstall dist/ptars*.whl
          cd ~ && python -c 'import ptars'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          [
            { version: "3.10", abi: "cp310-cp310" },
            { version: "3.11", abi: "cp311-cp311" },
            { version: "3.12", abi: "cp312-cp312" },
          ]
        target:  # TODO: armv7 not supported by pyarrow yet
          - aarch64
    steps:
      - uses: actions/checkout@v4
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i python${{matrix.python.version}} --release --out dist
      - uses: uraimo/run-on-arch-action@v2.7.2
        name: Install build wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          # Mount the dist directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt update -y
            apt install -y gcc musl-dev python3-dev # this is needed for psutil
            apt install -y --no-install-recommends software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt update -y
            PYTHON=python${{ matrix.python.version }}
            apt install -y $PYTHON $PYTHON-distutils $PYTHON-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python.version }}
            $PYTHON --version
            $PYTHON -m venv venv
            source venv/bin/activate
            pip install --upgrade pip setuptools wheel
            pip install --force-reinstall dist/ptars*.whl
            cd ~ && python -c 'import ptars'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  upload-release:
    name: Upload Release to PyPI
    runs-on: ubuntu-latest
    needs:
      - sdist
      - macos
      - windows
      - linux
      - linux-cross
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheels
      - name: List wheels
        shell: bash
        run: |
          ls -ltr wheels/
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: wheels
          verbose: true
          password: ${{ secrets.PYPI_API_TOKEN }}
